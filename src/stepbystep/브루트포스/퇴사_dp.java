package stepbystep.브루트포스;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class 퇴사_dp {
public static void main(String[] args) throws NumberFormatException, IOException {
	BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
	
	int n = Integer.parseInt(reader.readLine());
	
	int[] t = new int[n];
	int[] p = new int[n];
	
	StringTokenizer st;
	for (int i=0; i<n; i++) {
		st = new StringTokenizer(reader.readLine());
		
		t[i] = Integer.parseInt(st.nextToken());
		p[i] = Integer.parseInt(st.nextToken());
	}
	
	//dp : N일에 얻을 수 있는 최대 수익
	int[] dp = new int[n+1];
	
	
	for (int i=0; i<n; i++) {
		if (i + t[i] <= n) {
			//날짜가 범위를 넘어가지 않는 경우
			//나중에 총합이 겹칠수도있어서 최대로 유지될수 있도록
			dp[i + t[i]] =Math.max(dp[i+t[i]],dp[i]+p[i]);
			//System.out.println("dp[i]:"+dp[i]);
			//System.out.println("p[i]:"+p[i]);
			//System.out.println("d[i+t[i]]:"+dp[i+t[i]]);
		}
		//현재 경우의 수가 0일 수 있기 때문에 이전의 최대값을 넣어줌.
		//해당 날짜에 일할 수 있든 없든 이전까지 일한 최대 수당을 넣어주어야 한다.
		dp[i+1] = Math.max(dp[i+1], dp[i]);
	}
	//Math.max(dp[i+t[i]],dp[i]+p[i]) 대신 dp[i]+p[i] 쓴경우
	//[0, 0, 0, 0, 0, 10, 20, 20, 40, 40, 50]
	//Math.max(dp[i+t[i]],dp[i]+p[i]) 쓴경우
	//[0, 0, 0, 0, 0, 50, 60, 60, 80, 80, 90]
	System.out.println(Arrays.toString(dp));
	System.out.println(dp[n]);
}
}
